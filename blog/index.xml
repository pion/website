<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Blogs on Pion</title><link>https://pion.ly/blog/</link><description>Recent content in Blogs on Pion</description><generator>Hugo</generator><language>en</language><lastBuildDate>Tue, 09 Sep 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://pion.ly/blog/index.xml" rel="self" type="application/rss+xml"/><item><title>Making a game with Pion</title><link>https://pion.ly/blog/making-a-game-with-pion/</link><pubDate>Tue, 09 Sep 2025 00:00:00 +0000</pubDate><guid>https://pion.ly/blog/making-a-game-with-pion/</guid><description>&lt;p>First of all to get some stuff out of the way, instead of using the &amp;ldquo;super complicated&amp;rdquo; WebRTC datachannels, why don&amp;rsquo;t we use something simpler?&lt;/p>
&lt;p>Websockets?&lt;/p>
&lt;ul>
&lt;li>Too slow (Most games use UDP + reliability layer on top)&lt;/li>
&lt;li>Fine for games that are turn-based/slow-paced though&lt;/li>
&lt;li>Runescape&lt;/li>
&lt;li>For more details, see:&lt;/li>
&lt;li>&lt;a href="https://gafferongames.com/post/udp_vs_tcp/">https://gafferongames.com/post/udp_vs_tcp/&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://gafferongames.com/post/client_server_connection/">https://gafferongames.com/post/client_server_connection/&lt;/a>
Web Transport&lt;/li>
&lt;li>Replacement for Websockets, uses QUIC instead of TCP&lt;/li>
&lt;li>Has been in development for a long time, and I want to get started now&lt;/li>
&lt;li>&lt;a href="https://caniuse.com/webtransport">https://caniuse.com/webtransport&lt;/a>&lt;/li>
&lt;li>The official demos from &lt;a href="https://github.com/w3c/webtransport">https://github.com/w3c/webtransport&lt;/a> do not work on Firefox on
Windows!&lt;/li>
&lt;li>&lt;a href="https://github.com/w3c/webtransport/issues/675">https://github.com/w3c/webtransport/issues/675&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://bugzilla.mozilla.org/show_bug.cgi?id=1969090">https://bugzilla.mozilla.org/show_bug.cgi?id=1969090&lt;/a>&lt;/li>
&lt;li>Will probably solve most of my problems once its finished.
Datachannels&lt;/li>
&lt;li>A piece of the WebRTC api that&amp;rsquo;s easy to miss&lt;/li>
&lt;li>Killer feature: let’s us send unreliable packets over the web using SCTP&lt;/li>
&lt;li>We don’t need WebTransport, we can use this today!
Benefits of WebRTC
● Do not need to host servers - Players can make their own
○ No more need for port forwarding or Hamachi!
● Only need one server for signaling
● It’s a specification, not a library
○ There are a lot of options out there for making your own WebRTC based thing
Drawbacks
● Setting up WebRTC is a paaaaaaaaaaaain
● You do need to host or use two different servers instead of one (Signaling +
STUN/TURN)
● Can just use Google’s STUN, but would be nice to somehow combine
signaling and STUN into one server.
List of WebRTC implementations (that I know of)
● &lt;a href="https://github.com/webrtc-sdk/libwebrtc?tab=readme-ov-file">https://github.com/webrtc-sdk/libwebrtc?tab=readme-ov-file&lt;/a>
○ this is (a fork of) the OG webrtc implementation
● &lt;a href="https://github.com/paullouisageneau/libdatachannel">https://github.com/paullouisageneau/libdatachannel&lt;/a> - C/C++
● &lt;a href="https://github.com/pion/webrtc">https://github.com/pion/webrtc&lt;/a> - Go
● &lt;a href="https://github.com/webrtc-rs/webrtc">https://github.com/webrtc-rs/webrtc&lt;/a> - Rust (using Tokio Runtime)
● &lt;a href="https://github.com/algesten/str0m">https://github.com/algesten/str0m&lt;/a> - Rust (sans-io)
● &lt;a href="https://github.com/sipsorcery-org/sipsorcery">https://github.com/sipsorcery-org/sipsorcery&lt;/a> - C# (poor datachannels support)
● &lt;a href="https://github.com/ValveSoftware/GameNetworkingSockets">https://github.com/ValveSoftware/GameNetworkingSockets&lt;/a>
○ Doesn’t actually implement WebRTC, but does use ICE and STUN/TURN for Peer to Peer
● &lt;a href="https://github.com/kyren/webrtc-unreliable">https://github.com/kyren/webrtc-unreliable&lt;/a> - Rust, unreliable data channels
Existing game networking libraries using WebRTC
● &lt;a href="https://github.com/geckosio/geckos.io">https://github.com/geckosio/geckos.io&lt;/a>
○ A client-server abstraction for WebRTC Datachannels written in Node.js
○ Have used this before, really nice, but a bit inefficient, see
&lt;a href="https://github.com/geckosio/geckos.io/issues/269">https://github.com/geckosio/geckos.io/issues/269&lt;/a>
● &lt;a href="https://github.com/poki/netlib">https://github.com/poki/netlib&lt;/a>
○ Peer-to-peer webrtc datachannel library for TypeScript
● &lt;a href="https://github.com/johanhelsing/matchbox">https://github.com/johanhelsing/matchbox&lt;/a>
○ Webrtc datachannel library for Rust, can compile to both native and WASM
● &lt;a href="https://github.com/peers/peerjs">https://github.com/peers/peerjs&lt;/a>
○ Not actually a game networking library, but great for browser-only apps/games
● &lt;a href="https://github.com/rameshvarun/netplayjs">https://github.com/rameshvarun/netplayjs&lt;/a>
○ Haven’t tested this too much, but seems to work alright
● &lt;a href="https://github.com/godotengine/webrtc-native">https://github.com/godotengine/webrtc-native&lt;/a>
○ Official Godot bindings to libdatachannel for Godot’s own multiplayer API
This was an intended use case
&lt;a href="https://news.ycombinator.com/item?id=13264952">https://news.ycombinator.com/item?id=13264952&lt;/a>
&lt;img src="https://pion.ly/img/comment_from_webrtc_team.png" alt="WebRTC Team Comment">
Why Go?
● It Just Gets The Job Done
● Has a pure-Go implementation of WebRTC (Pion)
● Don’t need any external dependencies (Like OpenSSL)
Why not Rust?
● I like Rust a lot!
● Go has a much bigger scene/easier to get help when it comes to WebRTC
● One of the few languages (besides C, C++, and C#) that can compile to game
consoles
● (Rust cannot yet)
● It’s really fast to code in compared to Rust
Why Ebitengine?
● 2D game engine that works on a whole bunch of platforms
● Potentially: Nintendo Switch + PC + Browser (!!!) crossplay
Show off Pion PR here
● &lt;a href="https://github.com/pion/example-webrtc-applications/pull/351">https://github.com/pion/example-webrtc-applications/pull/351&lt;/a>
● (Also show version that works with the web if we have time)
● github.com/ValorZard/gopher-combat
●
Games that use WebRTC
● &lt;a href="https://toughlovearena.com/">https://toughlovearena.com/&lt;/a>
● &lt;a href="https://www.counterpicklabs.com/">https://www.counterpicklabs.com/&lt;/a>
● &lt;a href="https://2dsoccer.com/">https://2dsoccer.com/&lt;/a>
● &lt;a href="https://github.com/TeamHypersomnia/Hypersomnia">https://github.com/TeamHypersomnia/Hypersomnia&lt;/a>
● Probably more!
WebXash3D
● &lt;a href="https://github.com/yohimik/webxash3d-fwgs">https://github.com/yohimik/webxash3d-fwgs&lt;/a>
○ &lt;a href="https://github.com/ololoken/xash3d-launcher">https://github.com/ololoken/xash3d-launcher&lt;/a> -half life death match
○ &lt;a href="https://turch.in/cs/index.html">https://turch.in/cs/index.html&lt;/a> - Counter Strike 1.6
● Reimplementation of Half Life 1 + Counter Strike 1.6 using WebRTC for multiplayer
&lt;img src="https://pion.ly/img/counter_strike_on_the_web.png" alt="Counter Strike">
Possibilities&lt;/li>
&lt;li>Host a minecraft style game without dedicated servers/port forwarding&lt;/li>
&lt;li>Could have players host everything themselves, no need for VPN/Hamachi&lt;/li>
&lt;li>Probably more!
Questions?
Thanks!
This wouldn’t be possible without
● The pion discord
● The libdatachannel discord
● The ebitengine discord
● The rust gamedev discord
And more! I stand on the shoulders of giants.&lt;/li>
&lt;/ul></description></item><item><title>FEC with Pion</title><link>https://pion.ly/blog/fec-with-pion/</link><pubDate>Mon, 23 Jun 2025 00:00:00 +0000</pubDate><guid>https://pion.ly/blog/fec-with-pion/</guid><description>&lt;p>We are excited to have FEC encoding support available in the pion/webrtc v4.1.2 + pion/interceptor v0.1.38. In this blog post, we&amp;rsquo;ll explain what FEC is and how to implement it with Pion.&lt;/p>
&lt;blockquote>
&lt;p>If you already know FEC, feel free to skip to &lt;a href="https://pion.ly/blog/fec-with-pion/#flexfec-in-pion">FlexFEC in Pion&lt;/a>.&lt;/p>&lt;/blockquote>
&lt;h2 id="quick-background-what-is-fec">Quick background: What is FEC?&lt;/h2>
&lt;p>Forward Error Correction (FEC) is a proactive loss-recovery mechanism:&lt;/p>
&lt;p>The sender transmits extra mathematically derived parity packets (e.g. xor of the media packets) along with each block of media packets. If the receiver later discovers that one or even more packets are lost, it can use the parity packets to recover the lost packets, using the XOR result of the received packets and the parity (repair) packet, all without waiting for the lost packets to be retransmitted.&lt;/p></description></item><item><title>Pion Opus</title><link>https://pion.ly/blog/pion-opus/</link><pubDate>Sun, 02 Oct 2022 00:00:00 +0000</pubDate><guid>https://pion.ly/blog/pion-opus/</guid><description>&lt;p>I am so excited to announce that &lt;a href="https://github.com/pion/opus">pion/opus&lt;/a> is now available. It is a Pure Go implementation
of the &lt;a href="https://opus-codec.org/">Opus Codec&lt;/a>. pion/opus is far from done though. It is far enough along for others to start playing
with and contributing too though. We still have a lot more work to do. If you are interested now is a great time to get involved!&lt;/p>
&lt;p>Now that the code is shared I wanted to share my goals, what I learned and hopes for the future.&lt;/p></description></item><item><title>ION, grown up and moving out.</title><link>https://pion.ly/blog/ion-grown-up-and-moving-out/</link><pubDate>Tue, 19 Jul 2022 00:00:00 +0000</pubDate><guid>https://pion.ly/blog/ion-grown-up-and-moving-out/</guid><description>&lt;p>Going forward the ION project will now be hosted at &lt;a href="https://github.com/ionorg/ion">ionorg/ion&lt;/a>. ION itself is not changing in any other way.
We are just making these changes to more clearly reflect the actual leadership and organization of the project. Changes like this aren&amp;rsquo;t free
though. Users may have to change imports, tooling and other software. We apologize for that, but hope these benefits are worth it.&lt;/p>
&lt;h3 id="recognize-the-actual-leadership-of-ion">Recognize the actual leadership of ION&lt;/h3>
&lt;p>The leadership and contributors of ION and Pion are often conflated. Often I will have users ask me questions or even thank me for ION.
This confusion is demotivating for the people actually doing the hard work. I worry that long term it will hurt the project.&lt;/p></description></item><item><title>Pion is a nonprofit project</title><link>https://pion.ly/blog/pion-nonprofit/</link><pubDate>Mon, 27 Dec 2021 00:00:00 +0000</pubDate><guid>https://pion.ly/blog/pion-nonprofit/</guid><description>&lt;p>Pion saw its first commit Wed Mar 7 2018. I didn&amp;rsquo;t have grand aspirations
for the project. It &lt;a href="../why-webrtc">felt important&lt;/a> at the time to make WebRTC more
accessible. Proprietary alternatives were being proposed and they
didn&amp;rsquo;t have technical advantages, they were just easier to use.
I enjoyed solving issues one at a time and helping users
use Pion.&lt;/p>
&lt;p>Interest in WebRTC then exploded in 2020. Lots of new demand for WebRTC
software popped up over night. New developers started learning it,
companies were founded around it and lots of VC money started entering
the space.&lt;/p></description></item><item><title>Why WebRTC?</title><link>https://pion.ly/blog/why-webrtc/</link><pubDate>Sun, 05 Dec 2021 00:00:00 +0000</pubDate><guid>https://pion.ly/blog/why-webrtc/</guid><description>&lt;p>This is a question I get in lots of different forms. Why should I use WebRTC instead of my
preferred video protocol? Why does WebRTC need to be in my browser? Why does WebRTC have to
be so complicated? Why do you continue to work on WebRTC projects?&lt;/p>
&lt;p>These are my answers to the Why&amp;rsquo;s of WebRTC. Lots of nuance exists, and these answers are heavily
influenced by the work I do. I have been working with WebRTC since 2013. In that time I worked on two implementations &lt;a href="https://github.com/pion/webrtc">Pion&lt;/a>
and &lt;a href="https://github.com/awslabs/amazon-kinesis-video-streams-webrtc-sdk-c">KVS WebRTC&lt;/a>. I also co-authored a book &lt;a href="https://webrtcforthecurious.com/">WebRTC for the Curious&lt;/a>.
I have used WebRTC at &lt;a href="https://golightstream.com/">startups&lt;/a> and &lt;a href="https://9to5mac.com/2021/06/11/hands-on-heres-a-first-look-at-how-facetime-works-in-a-web-browser/">corporate&lt;/a> projects.&lt;/p></description></item></channel></rss>